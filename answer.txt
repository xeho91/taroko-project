// NEW ANSWER

Best option (snippet code): 1 - it has Event Delegation.

Typically, in vanilla JavaScript, the event handler (listener) should be
delegated to the parent element. To get the expected results - getting
particular inner HTML code of a clicked element, there would have to be written
better logic with event target. Delegating handler also helps with performance.


However, in terms of React...
The framework did this optimisation internally by delegating the event handler
to the document body until React 17.
Source: https://github.com/facebook/react/issues/13635

Now, since the 17 version, this behaviour was removed.

The core article I read which filled the gap in my knowledge is:
https://blog.saeloun.com/2021/07/08/react-17-event-delagation.html

The official source of this change:
https://reactjs.org/blog/2020/08/10/react-v17-rc.html#changes-to-event-delegation

To sum up, I was wrong with my answer to the quiz. The best snippet of code was
number one. And for getting the desired result (child node inner HTML), change
the logic to use event target, so there would be no side effects I encountered.



// OLD ANSWER (WRONG)
I stand by solution two as the choice for the best way of writing React code.

The main reason is, it avoids side effects.
I made an example sandbox to provide a base for the explanation:
https://codesandbox.io/s/youthful-glitter-6en77

In the second solution, the event listener is assigned directly to the desired
element.
So, the handler will return the innerHTML code of the child element.
Example (from the Solution 2 - Option Two):
```
Clicked on: Dog-2106
```

Meanwhile, in the first option, it is possible to click more than one element.
We'll get an unexpected behaviour of returning the entire parent node inner
HTML code.
There's also a performance lag because the browser's engine is trying to read it.
It can be noticeable if the list more than 1000 elements,
or the child node inner code will be more prosperous
(as in more inner HTML code for each component).
Example (from the Solution 1 - Option One):
```
Clicked on: <h2>Option One</h2><div>Cat-1</div><div>Cat-2</div><div>Cat-3</div>...truncated...</div>
```
When users accidentally "select" more than just one element,
it happens, which is not an excepted behaviour.

The second solution doesn't have this problem. It is working fast.
It returns what we expected because the click event handler is assigned directly
to each child element instead of the parent. So, we specify better for the
engine which inner HTML code to return.








// OLD ANSWER - Unclear, contradist
To my understanding, solution two (option 2).
It avoids unnecessary binding.

Assuming the array list will have 1000 items, then the JavaScript engine will
take the time to find the specific child node to make any event listener
operation it.

To sum up, it will take a significant performance toll because it
will have to loop all of the childNodes, to get/find specific element
properties.
